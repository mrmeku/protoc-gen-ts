load("@io_bazel_rules_go//proto:def.bzl", "go_proto_library")
load("@rules_proto//proto:defs.bzl", "proto_library")
load("@aspect_rules_ts//ts:defs.bzl", "ts_project")
load("//:index.bzl", "ts_proto_library")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("@npm//:rollup/package_json.bzl", rollup_bin = "bin")
load("@npm//:http-server/package_json.bzl", http_server_bin = "bin")

write_source_files(
    name = "diff",
    files = {
        "weather_checked.ts": ":weather_ts_proto",
        "weather_promise_checked.ts": ":weather_promise_ts_proto",
    },
)

proto_library(
    name = "weather_proto",
    srcs = ["weather.proto"],
    visibility = ["//visibility:public"],
)

proto_library(
    name = "weather_promise_proto",
    srcs = ["weather_promise.proto"],
    visibility = ["//visibility:public"],
)

ts_proto_library(
    name = "weather_ts_proto",
    features = ["target=web"],
    deps = [":weather_proto"],
)

ts_proto_library(
    name = "weather_promise_ts_proto",
    features = [
        "target=web",
        "unary_rpc_promise",
    ],
    deps = [":weather_promise_proto"],
)

ts_project(
    name = "web",
    srcs = [
        "index.ts",
        "weather_checked.ts",
        "weather_promise_checked.ts",
    ],
    tsconfig = {
        "compilerOptions": {
            "target": "ES2020",
            "module": "CommonJS",
        },
    },
    deps = [
        "//:node_modules/@grpc/grpc-js",
        "//:node_modules/@types/google-protobuf",
        "//:node_modules/@types/node",
        "//:node_modules/google-protobuf",
        "//:node_modules/grpc-web",
    ],
)

rollup_bin.rollup(
    name = "bundle",
    srcs = [
        "rollup.config.js",
        ":web",
        "//:node_modules/@rollup/plugin-commonjs",
        "//:node_modules/@rollup/plugin-node-resolve",
    ],
    outs = [
        "bundle.js",
    ],
    args = [
        "--file=bundle.js",
        "--format=esm",
        "--config=./rollup.config.js",
        "-- index.js",
    ],
    chdir = package_name(),
)

http_server_bin.http_server_binary(
    name = "client",
    args = [
        package_name(),
    ],
    data = [
        "index.html",
        ":bundle.js",
    ],
    visibility = ["//test/web:__pkg__"],
)

go_proto_library(
    name = "weather_go_proto",
    compilers = ["@io_bazel_rules_go//proto:go_grpc"],
    importpath = "github.com/thesayyn/protoc-gen-ts/test/web/client",
    proto = ":weather_proto",
    visibility = ["//visibility:public"],
)
